#################
## Proxy Setup ##
#################

# Support WebSocket proxying by intelligently setting the `Connection` header passed to the upstream
map $http_upgrade $connection_upgrade {
    default                     Upgrade;
    ''                          close;
}

proxy_cache_path /etc/nginx/graphistry/cache levels=1:2 use_temp_path=off keys_zone=global_cache:10m inactive=1d max_size=10g;

upstream central {
    server                      central:10000;
    keepalive                   32;
}

upstream pivot {
    server                      pivot:3000;
    keepalive                   512;
}

#########################################
##                                     ##
##       Worker Upstreams & Maps       ##
##                                     ##
#########################################


    upstream worker10000  {
        server  viz:10000;
    }
    upstream worker10001  {
        server  viz:10001;
    }
    upstream worker10002  {
        server  viz:10002;
    }
    upstream worker10003  {
        server  viz:10003;
    }
    upstream worker10004  {
        server  viz:10004;
    }
    upstream worker10005  {
        server  viz:10005;
    }
    upstream worker10006  {
        server  viz:10006;
    }
    upstream worker10007  {
        server  viz:10007;
    }
    upstream worker10008  {
        server  viz:10008;
    }
    upstream worker10009  {
        server  viz:10009;
    }


    upstream worker10010  {
        server  viz:10010;
    }
    upstream worker10011  {
        server  viz:10011;
    }
    upstream worker10012  {
        server  viz:10012;
    }
    upstream worker10013  {
        server  viz:10013;
    }
    upstream worker10014  {
        server  viz:10014;
    }
    upstream worker10015  {
        server  viz:10015;
    }
    upstream worker10016  {
        server  viz:10016;
    }
    upstream worker10017  {
        server  viz:10017;
    }
    upstream worker10018  {
        server  viz:10018;
    }
    upstream worker10019  {
        server  viz:10019;
    }


    upstream worker10020  {
        server  viz:10020;
    }
    upstream worker10021  {
        server  viz:10021;
    }
    upstream worker10022  {
        server  viz:10022;
    }
    upstream worker10023  {
        server  viz:10023;
    }
    upstream worker10024  {
        server  viz:10024;
    }
    upstream worker10025  {
        server  viz:10025;
    }
    upstream worker10026  {
        server  viz:10026;
    }
    upstream worker10027  {
        server  viz:10027;
    }
    upstream worker10028  {
        server  viz:10028;
    }
    upstream worker10029  {
        server  viz:10029;
    }


    upstream worker10030  {
        server  viz:10030;
    }
    upstream worker10031  {
        server  viz:10031;
    }



map $worker_path $worker_location {
    default  @worker_notfound;

    10000  @worker10000;
    10001  @worker10001;
    10002  @worker10002;
    10003  @worker10003;
    10004  @worker10004;
    10005  @worker10005;
    10006  @worker10006;
    10007  @worker10007;
    10008  @worker10008;
    10009  @worker10009;

    10010  @worker10010;
    10011  @worker10011;
    10012  @worker10012;
    10013  @worker10013;
    10014  @worker10014;
    10015  @worker10015;
    10016  @worker10016;
    10017  @worker10017;
    10018  @worker10018;
    10019  @worker10019;

    10020  @worker10020;
    10021  @worker10021;
    10022  @worker10022;
    10023  @worker10023;
    10024  @worker10024;
    10025  @worker10025;
    10026  @worker10026;
    10027  @worker10027;
    10028  @worker10028;
    10029  @worker10029;

    10030  @worker10030;
    10031  @worker10031;

}


#########################################
##                                     ##
##    End Worker Upstreams & Maps      ##
##                                     ##
#########################################



server {

    ###################
    ## General Setup ##
    ###################

    server_name                 _;

    proxy_http_version          1.1;

    #import /etc/nginx/graphistry/ssl.conf

    proxy_set_header            Host              $http_host;
    proxy_set_header            X-Real-IP         $remote_addr;
    proxy_set_header            X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header            X-Forwarded-Proto $scheme;

    # Support proxying WebSocket connections
    proxy_set_header            Upgrade           $http_upgrade;
    proxy_set_header            Connection        $connection_upgrade;

    # Block Slack's link preview generator bot, so that posting a viz link into Slack doesn't
    # overwhelm the server. We should have a more robust system for stopping all bots, though
    if ($http_user_agent ~* Slack) {
        return 403;
    }

    location /cached/ {
        proxy_cache global_cache;
        proxy_cache_revalidate on;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        proxy_pass http://localhost/;
    }

    # This is for completeness. We move files around during building viz, and central will automatically serve it.

    location /static/viz/ {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
        add_header 'Access-Control-Max-Age' 20000000;

        alias /opt/graphistry/apps/core/viz/www/public/;
    }

    location /graph/img/ {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
        add_header 'Access-Control-Max-Age' 20000000;

        alias /opt/graphistry/apps/core/viz/www/public/img/;
    }

    location /graph/fonts/ {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
        add_header 'Access-Control-Max-Age' 20000000;
        alias /opt/graphistry/apps/core/viz/www/public/fonts/;
    }

    location /pivot/img/ {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
        add_header 'Access-Control-Max-Age' 20000000;

        alias /opt/graphistry/apps/core/pivot/www/public/img/;
    }

    location /pivot/icons/ {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
        add_header 'Access-Control-Max-Age' 20000000;

        alias /opt/graphistry/apps/core/pivot/www/public/icons/;
    }

    location /pivot/fonts/ {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
        add_header 'Access-Control-Max-Age' 20000000;

        alias /opt/graphistry/apps/core/pivot/www/public/fonts/;
    }

    access_log /var/log/graphistry/nginx/viz.access.log;
    error_log /var/log/graphistry/nginx/viz.error.log;


    #####################################
    ## Applications: Viz, Nexus, Pivot ##
    #####################################

    ################################################################################################
    # Workers config
    ################################################################################################

    # Since a `proxy_set_header` directive inside a `location` block clears all inherited headers,
    # we define a var and set *that* inside a location, then set below, outside a `location`.
    set                         $worker_id             '';

    # We strip off the `/worker/xxxx/` prefix of the request path before sending it to the worker
    # (to canonicalize it), but a worker needs to be aware of its prefix if it wants to construct
    # publically accessible URIs that route to it. This header tells the worker its prefix.
    proxy_set_header            X-Graphistry-Prefix    /worker/$worker_id;

    # Auto-generated file with `location @worker1234 {}` blocks, & a map that sets $worker_location




#########################################
##                                     ##
##        Worker Locations             ##
##                                     ##
#########################################


    location @worker10000 {
        set $worker_id 10000;
        proxy_pass     http://worker10000;
    }
    location @worker10001 {
        set $worker_id 10001;
        proxy_pass     http://worker10001;
    }
    location @worker10002 {
        set $worker_id 10002;
        proxy_pass     http://worker10002;
    }
    location @worker10003 {
        set $worker_id 10003;
        proxy_pass     http://worker10003;
    }
    location @worker10004 {
        set $worker_id 10004;
        proxy_pass     http://worker10004;
    }
    location @worker10005 {
        set $worker_id 10005;
        proxy_pass     http://worker10005;
    }
    location @worker10006 {
        set $worker_id 10006;
        proxy_pass     http://worker10006;
    }
    location @worker10007 {
        set $worker_id 10007;
        proxy_pass     http://worker10007;
    }
    location @worker10008 {
        set $worker_id 10008;
        proxy_pass     http://worker10008;
    }
    location @worker10009 {
        set $worker_id 10009;
        proxy_pass     http://worker10009;
    }


    location @worker10010 {
        set $worker_id 10010;
        proxy_pass     http://worker10010;
    }
    location @worker10011 {
        set $worker_id 10011;
        proxy_pass     http://worker10011;
    }
    location @worker10012 {
        set $worker_id 10012;
        proxy_pass     http://worker10012;
    }
    location @worker10013 {
        set $worker_id 10013;
        proxy_pass     http://worker10013;
    }
    location @worker10014 {
        set $worker_id 10014;
        proxy_pass     http://worker10014;
    }
    location @worker10015 {
        set $worker_id 10015;
        proxy_pass     http://worker10015;
    }
    location @worker10016 {
        set $worker_id 10016;
        proxy_pass     http://worker10016;
    }
    location @worker10017 {
        set $worker_id 10017;
        proxy_pass     http://worker10017;
    }
    location @worker10018 {
        set $worker_id 10018;
        proxy_pass     http://worker10018;
    }
    location @worker10019 {
        set $worker_id 10019;
        proxy_pass     http://worker10019;
    }


    location @worker10020 {
        set $worker_id 10020;
        proxy_pass     http://worker10020;
    }
    location @worker10021 {
        set $worker_id 10021;
        proxy_pass     http://worker10021;
    }
    location @worker10022 {
        set $worker_id 10022;
        proxy_pass     http://worker10022;
    }
    location @worker10023 {
        set $worker_id 10023;
        proxy_pass     http://worker10023;
    }
    location @worker10024 {
        set $worker_id 10024;
        proxy_pass     http://worker10024;
    }
    location @worker10025 {
        set $worker_id 10025;
        proxy_pass     http://worker10025;
    }
    location @worker10026 {
        set $worker_id 10026;
        proxy_pass     http://worker10026;
    }
    location @worker10027 {
        set $worker_id 10027;
        proxy_pass     http://worker10027;
    }
    location @worker10028 {
        set $worker_id 10028;
        proxy_pass     http://worker10028;
    }
    location @worker10029 {
        set $worker_id 10029;
        proxy_pass     http://worker10029;
    }


    location @worker10030 {
        set $worker_id 10030;
        proxy_pass     http://worker10030;
    }
    location @worker10031 {
        set $worker_id 10031;
        proxy_pass     http://worker10031;
    }



#########################################
##                                     ##
##       End Worker Locations          ##
##                                     ##
#########################################


 # Map requests for a worker from URI prefix (`/worker/1234/...`) to its private location block
    location /worker/ {
        # Get $worker_path from the URI, then rewrite the request to remove `/worker/xxxx`. This
        # rewritten, canonicalized request URI is what is sent to the upstream worker.
        rewrite                 ^/worker/(?<worker_path>[\w]+)/(.*)$ /$2 break;

        # Do an internal redirect to the `@` name location of the worker. `@` locations aren't
        # processed in normal request handling, so we use `try_files` with a filename known to
        # not exist, and specifiy the named location as the final, fallback URI.
        try_files                /workers_offline.html  $worker_location;
    }

    # This location is used as a default, fallback location if we can't map to a defined worker
    location @worker_notfound {
        return 404;
    }


    ################################################################################################
    # Central config
    ################################################################################################

    # Redirect '/' (root index), and only that exact path, to /graphistry/
    location = / {
        return                  301 /graphistry/;
    }

    location /error {
        proxy_pass              http://central;
    }

    location /api/internal {
        deny all;
    }

    location /api {
        limit_req zone=globaldrip burst=1 nodelay;
        proxy_pass              http://central;
    }

    location / {
        proxy_pass              http://central;
    }

        #################
        ##--- Pivot ---##
        #################

        location /pivot/ {
            proxy_pass  http://pivot;
        }



}